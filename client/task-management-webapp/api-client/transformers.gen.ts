// This file is auto-generated by @hey-api/openapi-ts

import type {
  RegisterResponse,
  GetApiAttachmentByIdResponse,
  GetApiAttachmentTaskByTaskIdResponse,
  PostApiAttachmentUploadByTaskIdResponse,
  GetApiBoardsResponse,
  GetApiBoardsByBoardIdResponse,
  GetApiCommentsTaskByTaskIdResponse,
  GetApiCommentsByCommentIdResponse,
  PostApiCommentsResponse,
  GetApiDashboardRecentActivityResponse,
  GetApiDashboardUpcomingTasksResponse,
  GetApiListsBoardByBoardIdResponse,
  GetApiListsByListIdResponse,
  GetApiMessagesResponse,
  PostApiMessagesResponse,
  GetApiMessagesConversationByUserIdResponse,
  GetApiMessagesByMessageIdResponse,
  GetApiNotificationsResponse,
  GetApiNotificationsUnreadResponse,
  GetApiTasksResponse,
  PostApiTasksResponse,
  GetApiTasksByTaskIdResponse,
  GetApiTasksListByListIdResponse,
  GetApiTasksQueryingByTitlePatternResponse,
  PostApiTasksQueryingResponse,
  GetApiUsersProfileResponse,
  GetApiUsersSearchResponse,
  GetApiUserProfileResponse,
  PutApiUserProfileResponse,
} from "./types.gen";

const userDtoSchemaResponseTransformer = (data: any) => {
  if (data.creationDate) {
    data.creationDate = new Date(data.creationDate);
  }
  if (data.lastLogin) {
    data.lastLogin = new Date(data.lastLogin);
  }
  return data;
};

export const registerResponseTransformer = async (
  data: any,
): Promise<RegisterResponse> => {
  data = userDtoSchemaResponseTransformer(data);
  return data;
};

const attachmentDtoSchemaResponseTransformer = (data: any) => {
  if (data.uploadTime) {
    data.uploadTime = new Date(data.uploadTime);
  }
  return data;
};

export const getApiAttachmentByIdResponseTransformer = async (
  data: any,
): Promise<GetApiAttachmentByIdResponse> => {
  data = attachmentDtoSchemaResponseTransformer(data);
  return data;
};

export const getApiAttachmentTaskByTaskIdResponseTransformer = async (
  data: any,
): Promise<GetApiAttachmentTaskByTaskIdResponse> => {
  data = data.map((item: any) => {
    return attachmentDtoSchemaResponseTransformer(item);
  });
  return data;
};

export const postApiAttachmentUploadByTaskIdResponseTransformer = async (
  data: any,
): Promise<PostApiAttachmentUploadByTaskIdResponse> => {
  data = attachmentDtoSchemaResponseTransformer(data);
  return data;
};

const boardDtoSchemaResponseTransformer = (data: any) => {
  if (data.createdAt) {
    data.createdAt = new Date(data.createdAt);
  }
  return data;
};

export const getApiBoardsResponseTransformer = async (
  data: any,
): Promise<GetApiBoardsResponse> => {
  data = data.map((item: any) => {
    return boardDtoSchemaResponseTransformer(item);
  });
  return data;
};

export const getApiBoardsByBoardIdResponseTransformer = async (
  data: any,
): Promise<GetApiBoardsByBoardIdResponse> => {
  data = boardDtoSchemaResponseTransformer(data);
  return data;
};

const commentDtoSchemaResponseTransformer = (data: any) => {
  if (data.creationDate) {
    data.creationDate = new Date(data.creationDate);
  }
  return data;
};

export const getApiCommentsTaskByTaskIdResponseTransformer = async (
  data: any,
): Promise<GetApiCommentsTaskByTaskIdResponse> => {
  data = data.map((item: any) => {
    return commentDtoSchemaResponseTransformer(item);
  });
  return data;
};

export const getApiCommentsByCommentIdResponseTransformer = async (
  data: any,
): Promise<GetApiCommentsByCommentIdResponse> => {
  data = commentDtoSchemaResponseTransformer(data);
  return data;
};

export const postApiCommentsResponseTransformer = async (
  data: any,
): Promise<PostApiCommentsResponse> => {
  data = commentDtoSchemaResponseTransformer(data);
  return data;
};

const recentActivityDtoSchemaResponseTransformer = (data: any) => {
  if (data.date) {
    data.date = new Date(data.date);
  }
  return data;
};

export const getApiDashboardRecentActivityResponseTransformer = async (
  data: any,
): Promise<GetApiDashboardRecentActivityResponse> => {
  data = data.map((item: any) => {
    return recentActivityDtoSchemaResponseTransformer(item);
  });
  return data;
};

const upcomingTaskDtoSchemaResponseTransformer = (data: any) => {
  if (data.dueDate) {
    data.dueDate = new Date(data.dueDate);
  }
  return data;
};

export const getApiDashboardUpcomingTasksResponseTransformer = async (
  data: any,
): Promise<GetApiDashboardUpcomingTasksResponse> => {
  data = data.map((item: any) => {
    return upcomingTaskDtoSchemaResponseTransformer(item);
  });
  return data;
};

const taskItemDtoSchemaResponseTransformer = (data: any) => {
  if (data.dueDate) {
    data.dueDate = new Date(data.dueDate);
  }
  if (data.createdAt) {
    data.createdAt = new Date(data.createdAt);
  }
  return data;
};

const listDtoSchemaResponseTransformer = (data: any) => {
  if (data.taskItemList) {
    data.taskItemList = data.taskItemList.map((item: any) => {
      return taskItemDtoSchemaResponseTransformer(item);
    });
  }
  return data;
};

export const getApiListsBoardByBoardIdResponseTransformer = async (
  data: any,
): Promise<GetApiListsBoardByBoardIdResponse> => {
  data = data.map((item: any) => {
    return listDtoSchemaResponseTransformer(item);
  });
  return data;
};

export const getApiListsByListIdResponseTransformer = async (
  data: any,
): Promise<GetApiListsByListIdResponse> => {
  data = listDtoSchemaResponseTransformer(data);
  return data;
};

const messageDtoSchemaResponseTransformer = (data: any) => {
  if (data.creationDate) {
    data.creationDate = new Date(data.creationDate);
  }
  if (data.readDate) {
    data.readDate = new Date(data.readDate);
  }
  return data;
};

export const getApiMessagesResponseTransformer = async (
  data: any,
): Promise<GetApiMessagesResponse> => {
  data = data.map((item: any) => {
    return messageDtoSchemaResponseTransformer(item);
  });
  return data;
};

export const postApiMessagesResponseTransformer = async (
  data: any,
): Promise<PostApiMessagesResponse> => {
  data = messageDtoSchemaResponseTransformer(data);
  return data;
};

export const getApiMessagesConversationByUserIdResponseTransformer = async (
  data: any,
): Promise<GetApiMessagesConversationByUserIdResponse> => {
  data = data.map((item: any) => {
    return messageDtoSchemaResponseTransformer(item);
  });
  return data;
};

export const getApiMessagesByMessageIdResponseTransformer = async (
  data: any,
): Promise<GetApiMessagesByMessageIdResponse> => {
  data = messageDtoSchemaResponseTransformer(data);
  return data;
};

const notificationDtoSchemaResponseTransformer = (data: any) => {
  if (data.creationDate) {
    data.creationDate = new Date(data.creationDate);
  }
  return data;
};

export const getApiNotificationsResponseTransformer = async (
  data: any,
): Promise<GetApiNotificationsResponse> => {
  data = data.map((item: any) => {
    return notificationDtoSchemaResponseTransformer(item);
  });
  return data;
};

export const getApiNotificationsUnreadResponseTransformer = async (
  data: any,
): Promise<GetApiNotificationsUnreadResponse> => {
  data = data.map((item: any) => {
    return notificationDtoSchemaResponseTransformer(item);
  });
  return data;
};

export const getApiTasksResponseTransformer = async (
  data: any,
): Promise<GetApiTasksResponse> => {
  data = data.map((item: any) => {
    return taskItemDtoSchemaResponseTransformer(item);
  });
  return data;
};

export const postApiTasksResponseTransformer = async (
  data: any,
): Promise<PostApiTasksResponse> => {
  data = taskItemDtoSchemaResponseTransformer(data);
  return data;
};

export const getApiTasksByTaskIdResponseTransformer = async (
  data: any,
): Promise<GetApiTasksByTaskIdResponse> => {
  data = taskItemDtoSchemaResponseTransformer(data);
  return data;
};

export const getApiTasksListByListIdResponseTransformer = async (
  data: any,
): Promise<GetApiTasksListByListIdResponse> => {
  data = data.map((item: any) => {
    return taskItemDtoSchemaResponseTransformer(item);
  });
  return data;
};

export const getApiTasksQueryingByTitlePatternResponseTransformer = async (
  data: any,
): Promise<GetApiTasksQueryingByTitlePatternResponse> => {
  data = data.map((item: any) => {
    return taskItemDtoSchemaResponseTransformer(item);
  });
  return data;
};

export const postApiTasksQueryingResponseTransformer = async (
  data: any,
): Promise<PostApiTasksQueryingResponse> => {
  data = data.map((item: any) => {
    return taskItemDtoSchemaResponseTransformer(item);
  });
  return data;
};

export const getApiUsersProfileResponseTransformer = async (
  data: any,
): Promise<GetApiUsersProfileResponse> => {
  data = userDtoSchemaResponseTransformer(data);
  return data;
};

export const getApiUsersSearchResponseTransformer = async (
  data: any,
): Promise<GetApiUsersSearchResponse> => {
  data = data.map((item: any) => {
    return userDtoSchemaResponseTransformer(item);
  });
  return data;
};

export const getApiUserProfileResponseTransformer = async (
  data: any,
): Promise<GetApiUserProfileResponse> => {
  data = userDtoSchemaResponseTransformer(data);
  return data;
};

export const putApiUserProfileResponseTransformer = async (
  data: any,
): Promise<PutApiUserProfileResponse> => {
  data = userDtoSchemaResponseTransformer(data);
  return data;
};
