// This file is auto-generated by @hey-api/openapi-ts

import type {
  Options as ClientOptions,
  TDataShape,
  Client,
} from "@hey-api/client-axios";
import type {
  LoginData,
  LoginResponse,
  RegisterData,
  RegisterResponse,
  GetUsersData,
  GetUsersResponse,
  PostApiTaskItemAddTaskItemData,
  GetApiTaskItemGetTaskItemByTaskItemIdData,
  GetApiTaskItemGetTaskItemByTaskItemIdResponse,
  GetApiTaskItemGetAllTaskItemsData,
  GetApiTaskItemGetAllTaskItemsResponse,
  GetApiTaskItemGetTaskItemByUserByUserIdData,
  GetApiTaskItemGetTaskItemByUserByUserIdResponse,
  PutApiTaskItemUpdateTaskItemData,
  DeleteApiTaskItemDeleteTaskItemByTaskItemIdData,
} from "./types.gen";
import { client as _heyApiClient } from "./client.gen";
import {
  registerResponseTransformer,
  getUsersResponseTransformer,
  getApiTaskItemGetTaskItemByTaskItemIdResponseTransformer,
  getApiTaskItemGetAllTaskItemsResponseTransformer,
  getApiTaskItemGetTaskItemByUserByUserIdResponseTransformer,
} from "./transformers.gen";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

export class AccountService {
  public static login<ThrowOnError extends boolean = false>(
    options?: Options<LoginData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).post<
      LoginResponse,
      unknown,
      ThrowOnError
    >({
      url: "/api/Account/login",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    });
  }

  public static register<ThrowOnError extends boolean = false>(
    options?: Options<RegisterData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).post<
      RegisterResponse,
      unknown,
      ThrowOnError
    >({
      responseTransformer: registerResponseTransformer,
      url: "/api/Account/register",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    });
  }
}

export class SampleService {
  public static getUsers<ThrowOnError extends boolean = false>(
    options?: Options<GetUsersData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).get<
      GetUsersResponse,
      unknown,
      ThrowOnError
    >({
      responseTransformer: getUsersResponseTransformer,
      url: "/api/Sample",
      ...options,
    });
  }
}

export class TaskItemService {
  public static postApiTaskItemAddTaskItem<
    ThrowOnError extends boolean = false,
  >(options?: Options<PostApiTaskItemAddTaskItemData, ThrowOnError>) {
    return (options?.client ?? _heyApiClient).post<
      unknown,
      unknown,
      ThrowOnError
    >({
      url: "/api/TaskItem/AddTaskItem",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    });
  }

  public static getApiTaskItemGetTaskItemByTaskItemId<
    ThrowOnError extends boolean = false,
  >(options: Options<GetApiTaskItemGetTaskItemByTaskItemIdData, ThrowOnError>) {
    return (options.client ?? _heyApiClient).get<
      GetApiTaskItemGetTaskItemByTaskItemIdResponse,
      unknown,
      ThrowOnError
    >({
      responseTransformer:
        getApiTaskItemGetTaskItemByTaskItemIdResponseTransformer,
      url: "/api/TaskItem/GetTaskItem/{taskItemId}",
      ...options,
    });
  }

  public static getApiTaskItemGetAllTaskItems<
    ThrowOnError extends boolean = false,
  >(options?: Options<GetApiTaskItemGetAllTaskItemsData, ThrowOnError>) {
    return (options?.client ?? _heyApiClient).get<
      GetApiTaskItemGetAllTaskItemsResponse,
      unknown,
      ThrowOnError
    >({
      responseTransformer: getApiTaskItemGetAllTaskItemsResponseTransformer,
      url: "/api/TaskItem/GetAllTaskItems",
      ...options,
    });
  }

  public static getApiTaskItemGetTaskItemByUserByUserId<
    ThrowOnError extends boolean = false,
  >(
    options: Options<GetApiTaskItemGetTaskItemByUserByUserIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<
      GetApiTaskItemGetTaskItemByUserByUserIdResponse,
      unknown,
      ThrowOnError
    >({
      responseTransformer:
        getApiTaskItemGetTaskItemByUserByUserIdResponseTransformer,
      url: "/api/TaskItem/GetTaskItemByUser/{userId}",
      ...options,
    });
  }

  public static putApiTaskItemUpdateTaskItem<
    ThrowOnError extends boolean = false,
  >(options?: Options<PutApiTaskItemUpdateTaskItemData, ThrowOnError>) {
    return (options?.client ?? _heyApiClient).put<
      unknown,
      unknown,
      ThrowOnError
    >({
      url: "/api/TaskItem/UpdateTaskItem",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    });
  }

  public static deleteApiTaskItemDeleteTaskItemByTaskItemId<
    ThrowOnError extends boolean = false,
  >(
    options: Options<
      DeleteApiTaskItemDeleteTaskItemByTaskItemIdData,
      ThrowOnError
    >,
  ) {
    return (options.client ?? _heyApiClient).delete<
      unknown,
      unknown,
      ThrowOnError
    >({
      url: "/api/TaskItem/DeleteTaskItem/{taskItemId}",
      ...options,
    });
  }
}
