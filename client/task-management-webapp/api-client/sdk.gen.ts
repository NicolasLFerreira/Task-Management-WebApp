// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options as ClientOptions,
  type TDataShape,
  type Client,
  formDataBodySerializer,
} from "@hey-api/client-axios";
import type {
  LoginData,
  LoginResponse,
  RegisterData,
  RegisterResponse,
  DeleteApiAttachmentByIdData,
  GetApiAttachmentByIdData,
  GetApiAttachmentByIdResponse,
  GetApiAttachmentTaskByTaskIdData,
  GetApiAttachmentTaskByTaskIdResponse,
  PostApiAttachmentUploadByTaskIdData,
  PostApiAttachmentUploadByTaskIdResponse,
  GetApiAttachmentDownloadByIdData,
  GetApiBoardsData,
  GetApiBoardsResponse,
  PostApiBoardsData,
  DeleteApiBoardsByBoardIdData,
  GetApiBoardsByBoardIdData,
  GetApiBoardsByBoardIdResponse,
  PutApiBoardsByBoardIdData,
  GetApiCommentsTaskByTaskIdData,
  GetApiCommentsTaskByTaskIdResponse,
  DeleteApiCommentsByCommentIdData,
  GetApiCommentsByCommentIdData,
  GetApiCommentsByCommentIdResponse,
  PutApiCommentsByCommentIdData,
  PostApiCommentsData,
  PostApiCommentsResponse,
  GetApiDashboardStatsData,
  GetApiDashboardStatsResponse,
  GetApiDashboardRecentActivityData,
  GetApiDashboardRecentActivityResponse,
  GetApiDashboardUpcomingTasksData,
  GetApiDashboardUpcomingTasksResponse,
  GetApiHealthData,
  GetApiLabelsBoardByBoardIdData,
  GetApiLabelsBoardByBoardIdResponse,
  DeleteApiLabelsByLabelIdData,
  GetApiLabelsByLabelIdData,
  GetApiLabelsByLabelIdResponse,
  PutApiLabelsByLabelIdData,
  PostApiLabelsData,
  PostApiLabelsResponse,
  PostApiLabelsTaskByTaskIdAddByLabelIdData,
  PostApiLabelsTaskByTaskIdRemoveByLabelIdData,
  GetApiListsBoardByBoardIdData,
  GetApiListsBoardByBoardIdResponse,
  DeleteApiListsByListIdData,
  GetApiListsByListIdData,
  GetApiListsByListIdResponse,
  PutApiListsByListIdData,
  PostApiListsData,
  PostApiListsReorderData,
  GetApiMessagesData,
  GetApiMessagesResponse,
  PostApiMessagesData,
  PostApiMessagesResponse,
  GetApiMessagesConversationByUserIdData,
  GetApiMessagesConversationByUserIdResponse,
  GetApiMessagesByMessageIdData,
  GetApiMessagesByMessageIdResponse,
  PostApiMessagesByMessageIdReadData,
  GetApiNotificationsData,
  GetApiNotificationsResponse,
  GetApiNotificationsUnreadData,
  GetApiNotificationsUnreadResponse,
  PostApiNotificationsByNotificationIdReadData,
  PostApiNotificationsReadAllData,
  GetApiTasksData,
  GetApiTasksResponse,
  PostApiTasksData,
  PostApiTasksResponse,
  DeleteApiTasksByTaskIdData,
  GetApiTasksByTaskIdData,
  GetApiTasksByTaskIdResponse,
  PutApiTasksByTaskIdData,
  GetApiTasksListByListIdData,
  GetApiTasksListByListIdResponse,
  PostApiTasksMoveData,
  PostApiTasksReorderData,
  PutApiTasksEditingByTaskItemIdData,
  GetApiTasksQueryingByTitlePatternData,
  GetApiTasksQueryingByTitlePatternResponse,
  PostApiTasksQueryingData,
  PostApiTasksQueryingResponse,
  GetApiUsersProfileData,
  GetApiUsersProfileResponse,
  PutApiUsersProfileData,
  PutApiUsersPasswordData,
  GetApiUsersSearchData,
  GetApiUsersSearchResponse,
  GetApiUserProfileData,
  GetApiUserProfileResponse,
  PutApiUserProfileData,
  PutApiUserProfileResponse,
  DeleteApiUserProfileProfilePhotoData,
  GetApiUserProfileProfilePhotoData,
  PostApiUserProfileProfilePhotoData,
} from "./types.gen";
import { client as _heyApiClient } from "./client.gen";
import {
  registerResponseTransformer,
  getApiAttachmentByIdResponseTransformer,
  getApiAttachmentTaskByTaskIdResponseTransformer,
  postApiAttachmentUploadByTaskIdResponseTransformer,
  getApiBoardsResponseTransformer,
  getApiBoardsByBoardIdResponseTransformer,
  getApiCommentsTaskByTaskIdResponseTransformer,
  getApiCommentsByCommentIdResponseTransformer,
  postApiCommentsResponseTransformer,
  getApiDashboardRecentActivityResponseTransformer,
  getApiDashboardUpcomingTasksResponseTransformer,
  getApiListsBoardByBoardIdResponseTransformer,
  getApiListsByListIdResponseTransformer,
  getApiMessagesResponseTransformer,
  postApiMessagesResponseTransformer,
  getApiMessagesConversationByUserIdResponseTransformer,
  getApiMessagesByMessageIdResponseTransformer,
  getApiNotificationsResponseTransformer,
  getApiNotificationsUnreadResponseTransformer,
  getApiTasksResponseTransformer,
  postApiTasksResponseTransformer,
  getApiTasksByTaskIdResponseTransformer,
  getApiTasksListByListIdResponseTransformer,
  getApiTasksQueryingByTitlePatternResponseTransformer,
  postApiTasksQueryingResponseTransformer,
  getApiUsersProfileResponseTransformer,
  getApiUsersSearchResponseTransformer,
  getApiUserProfileResponseTransformer,
  putApiUserProfileResponseTransformer,
} from "./transformers.gen";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

export class AccountService {
  public static login<ThrowOnError extends boolean = false>(
    options?: Options<LoginData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).post<
      LoginResponse,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: "Authorization",
          type: "apiKey",
        },
      ],
      url: "/api/Account/login",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    });
  }

  public static register<ThrowOnError extends boolean = false>(
    options?: Options<RegisterData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).post<
      RegisterResponse,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: "Authorization",
          type: "apiKey",
        },
      ],
      responseTransformer: registerResponseTransformer,
      url: "/api/Account/register",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    });
  }
}

export class AttachmentService {
  public static deleteApiAttachmentById<ThrowOnError extends boolean = false>(
    options: Options<DeleteApiAttachmentByIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).delete<
      unknown,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: "Authorization",
          type: "apiKey",
        },
      ],
      url: "/api/Attachment/{id}",
      ...options,
    });
  }

  public static getApiAttachmentById<ThrowOnError extends boolean = false>(
    options: Options<GetApiAttachmentByIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<
      GetApiAttachmentByIdResponse,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: "Authorization",
          type: "apiKey",
        },
      ],
      responseTransformer: getApiAttachmentByIdResponseTransformer,
      url: "/api/Attachment/{id}",
      ...options,
    });
  }

  public static getApiAttachmentTaskByTaskId<
    ThrowOnError extends boolean = false,
  >(options: Options<GetApiAttachmentTaskByTaskIdData, ThrowOnError>) {
    return (options.client ?? _heyApiClient).get<
      GetApiAttachmentTaskByTaskIdResponse,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: "Authorization",
          type: "apiKey",
        },
      ],
      responseTransformer: getApiAttachmentTaskByTaskIdResponseTransformer,
      url: "/api/Attachment/task/{taskId}",
      ...options,
    });
  }

  public static postApiAttachmentUploadByTaskId<
    ThrowOnError extends boolean = false,
  >(options: Options<PostApiAttachmentUploadByTaskIdData, ThrowOnError>) {
    return (options.client ?? _heyApiClient).post<
      PostApiAttachmentUploadByTaskIdResponse,
      unknown,
      ThrowOnError
    >({
      ...formDataBodySerializer,
      security: [
        {
          name: "Authorization",
          type: "apiKey",
        },
      ],
      responseTransformer: postApiAttachmentUploadByTaskIdResponseTransformer,
      url: "/api/Attachment/upload/{taskId}",
      ...options,
      headers: {
        "Content-Type": null,
        ...options?.headers,
      },
    });
  }

  public static getApiAttachmentDownloadById<
    ThrowOnError extends boolean = false,
  >(options: Options<GetApiAttachmentDownloadByIdData, ThrowOnError>) {
    return (options.client ?? _heyApiClient).get<
      unknown,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: "Authorization",
          type: "apiKey",
        },
      ],
      url: "/api/Attachment/download/{id}",
      ...options,
    });
  }
}

export class BoardService {
  public static getApiBoards<ThrowOnError extends boolean = false>(
    options?: Options<GetApiBoardsData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).get<
      GetApiBoardsResponse,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: "Authorization",
          type: "apiKey",
        },
      ],
      responseTransformer: getApiBoardsResponseTransformer,
      url: "/api/boards",
      ...options,
    });
  }

  public static postApiBoards<ThrowOnError extends boolean = false>(
    options?: Options<PostApiBoardsData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).post<
      unknown,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: "Authorization",
          type: "apiKey",
        },
      ],
      url: "/api/boards",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    });
  }

  public static deleteApiBoardsByBoardId<ThrowOnError extends boolean = false>(
    options: Options<DeleteApiBoardsByBoardIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).delete<
      unknown,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: "Authorization",
          type: "apiKey",
        },
      ],
      url: "/api/boards/{boardId}",
      ...options,
    });
  }

  public static getApiBoardsByBoardId<ThrowOnError extends boolean = false>(
    options: Options<GetApiBoardsByBoardIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<
      GetApiBoardsByBoardIdResponse,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: "Authorization",
          type: "apiKey",
        },
      ],
      responseTransformer: getApiBoardsByBoardIdResponseTransformer,
      url: "/api/boards/{boardId}",
      ...options,
    });
  }

  public static putApiBoardsByBoardId<ThrowOnError extends boolean = false>(
    options: Options<PutApiBoardsByBoardIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).put<
      unknown,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: "Authorization",
          type: "apiKey",
        },
      ],
      url: "/api/boards/{boardId}",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    });
  }
}

export class CommentService {
  public static getApiCommentsTaskByTaskId<
    ThrowOnError extends boolean = false,
  >(options: Options<GetApiCommentsTaskByTaskIdData, ThrowOnError>) {
    return (options.client ?? _heyApiClient).get<
      GetApiCommentsTaskByTaskIdResponse,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: "Authorization",
          type: "apiKey",
        },
      ],
      responseTransformer: getApiCommentsTaskByTaskIdResponseTransformer,
      url: "/api/comments/task/{taskId}",
      ...options,
    });
  }

  public static deleteApiCommentsByCommentId<
    ThrowOnError extends boolean = false,
  >(options: Options<DeleteApiCommentsByCommentIdData, ThrowOnError>) {
    return (options.client ?? _heyApiClient).delete<
      unknown,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: "Authorization",
          type: "apiKey",
        },
      ],
      url: "/api/comments/{commentId}",
      ...options,
    });
  }

  public static getApiCommentsByCommentId<ThrowOnError extends boolean = false>(
    options: Options<GetApiCommentsByCommentIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<
      GetApiCommentsByCommentIdResponse,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: "Authorization",
          type: "apiKey",
        },
      ],
      responseTransformer: getApiCommentsByCommentIdResponseTransformer,
      url: "/api/comments/{commentId}",
      ...options,
    });
  }

  public static putApiCommentsByCommentId<ThrowOnError extends boolean = false>(
    options: Options<PutApiCommentsByCommentIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).put<
      unknown,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: "Authorization",
          type: "apiKey",
        },
      ],
      url: "/api/comments/{commentId}",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    });
  }

  public static postApiComments<ThrowOnError extends boolean = false>(
    options?: Options<PostApiCommentsData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).post<
      PostApiCommentsResponse,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: "Authorization",
          type: "apiKey",
        },
      ],
      responseTransformer: postApiCommentsResponseTransformer,
      url: "/api/comments",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    });
  }
}

export class DashboardService {
  public static getApiDashboardStats<ThrowOnError extends boolean = false>(
    options?: Options<GetApiDashboardStatsData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).get<
      GetApiDashboardStatsResponse,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: "Authorization",
          type: "apiKey",
        },
      ],
      url: "/api/dashboard/stats",
      ...options,
    });
  }

  public static getApiDashboardRecentActivity<
    ThrowOnError extends boolean = false,
  >(options?: Options<GetApiDashboardRecentActivityData, ThrowOnError>) {
    return (options?.client ?? _heyApiClient).get<
      GetApiDashboardRecentActivityResponse,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: "Authorization",
          type: "apiKey",
        },
      ],
      responseTransformer: getApiDashboardRecentActivityResponseTransformer,
      url: "/api/dashboard/recent-activity",
      ...options,
    });
  }

  public static getApiDashboardUpcomingTasks<
    ThrowOnError extends boolean = false,
  >(options?: Options<GetApiDashboardUpcomingTasksData, ThrowOnError>) {
    return (options?.client ?? _heyApiClient).get<
      GetApiDashboardUpcomingTasksResponse,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: "Authorization",
          type: "apiKey",
        },
      ],
      responseTransformer: getApiDashboardUpcomingTasksResponseTransformer,
      url: "/api/dashboard/upcoming-tasks",
      ...options,
    });
  }
}

export class HealthService {
  public static getApiHealth<ThrowOnError extends boolean = false>(
    options?: Options<GetApiHealthData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).get<
      unknown,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: "Authorization",
          type: "apiKey",
        },
      ],
      url: "/api/health",
      ...options,
    });
  }
}

export class LabelService {
  public static getApiLabelsBoardByBoardId<
    ThrowOnError extends boolean = false,
  >(options: Options<GetApiLabelsBoardByBoardIdData, ThrowOnError>) {
    return (options.client ?? _heyApiClient).get<
      GetApiLabelsBoardByBoardIdResponse,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: "Authorization",
          type: "apiKey",
        },
      ],
      url: "/api/labels/board/{boardId}",
      ...options,
    });
  }

  public static deleteApiLabelsByLabelId<ThrowOnError extends boolean = false>(
    options: Options<DeleteApiLabelsByLabelIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).delete<
      unknown,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: "Authorization",
          type: "apiKey",
        },
      ],
      url: "/api/labels/{labelId}",
      ...options,
    });
  }

  public static getApiLabelsByLabelId<ThrowOnError extends boolean = false>(
    options: Options<GetApiLabelsByLabelIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<
      GetApiLabelsByLabelIdResponse,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: "Authorization",
          type: "apiKey",
        },
      ],
      url: "/api/labels/{labelId}",
      ...options,
    });
  }

  public static putApiLabelsByLabelId<ThrowOnError extends boolean = false>(
    options: Options<PutApiLabelsByLabelIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).put<
      unknown,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: "Authorization",
          type: "apiKey",
        },
      ],
      url: "/api/labels/{labelId}",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    });
  }

  public static postApiLabels<ThrowOnError extends boolean = false>(
    options?: Options<PostApiLabelsData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).post<
      PostApiLabelsResponse,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: "Authorization",
          type: "apiKey",
        },
      ],
      url: "/api/labels",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    });
  }

  public static postApiLabelsTaskByTaskIdAddByLabelId<
    ThrowOnError extends boolean = false,
  >(options: Options<PostApiLabelsTaskByTaskIdAddByLabelIdData, ThrowOnError>) {
    return (options.client ?? _heyApiClient).post<
      unknown,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: "Authorization",
          type: "apiKey",
        },
      ],
      url: "/api/labels/task/{taskId}/add/{labelId}",
      ...options,
    });
  }

  public static postApiLabelsTaskByTaskIdRemoveByLabelId<
    ThrowOnError extends boolean = false,
  >(
    options: Options<
      PostApiLabelsTaskByTaskIdRemoveByLabelIdData,
      ThrowOnError
    >,
  ) {
    return (options.client ?? _heyApiClient).post<
      unknown,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: "Authorization",
          type: "apiKey",
        },
      ],
      url: "/api/labels/task/{taskId}/remove/{labelId}",
      ...options,
    });
  }
}

export class ListService {
  public static getApiListsBoardByBoardId<ThrowOnError extends boolean = false>(
    options: Options<GetApiListsBoardByBoardIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<
      GetApiListsBoardByBoardIdResponse,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: "Authorization",
          type: "apiKey",
        },
      ],
      responseTransformer: getApiListsBoardByBoardIdResponseTransformer,
      url: "/api/lists/board/{boardId}",
      ...options,
    });
  }

  public static deleteApiListsByListId<ThrowOnError extends boolean = false>(
    options: Options<DeleteApiListsByListIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).delete<
      unknown,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: "Authorization",
          type: "apiKey",
        },
      ],
      url: "/api/lists/{listId}",
      ...options,
    });
  }

  public static getApiListsByListId<ThrowOnError extends boolean = false>(
    options: Options<GetApiListsByListIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<
      GetApiListsByListIdResponse,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: "Authorization",
          type: "apiKey",
        },
      ],
      responseTransformer: getApiListsByListIdResponseTransformer,
      url: "/api/lists/{listId}",
      ...options,
    });
  }

  public static putApiListsByListId<ThrowOnError extends boolean = false>(
    options: Options<PutApiListsByListIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).put<
      unknown,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: "Authorization",
          type: "apiKey",
        },
      ],
      url: "/api/lists/{listId}",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    });
  }

  public static postApiLists<ThrowOnError extends boolean = false>(
    options?: Options<PostApiListsData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).post<
      unknown,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: "Authorization",
          type: "apiKey",
        },
      ],
      url: "/api/lists",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    });
  }

  public static postApiListsReorder<ThrowOnError extends boolean = false>(
    options?: Options<PostApiListsReorderData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).post<
      unknown,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: "Authorization",
          type: "apiKey",
        },
      ],
      url: "/api/lists/reorder",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    });
  }
}

export class MessageService {
  public static getApiMessages<ThrowOnError extends boolean = false>(
    options?: Options<GetApiMessagesData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).get<
      GetApiMessagesResponse,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: "Authorization",
          type: "apiKey",
        },
      ],
      responseTransformer: getApiMessagesResponseTransformer,
      url: "/api/messages",
      ...options,
    });
  }

  public static postApiMessages<ThrowOnError extends boolean = false>(
    options?: Options<PostApiMessagesData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).post<
      PostApiMessagesResponse,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: "Authorization",
          type: "apiKey",
        },
      ],
      responseTransformer: postApiMessagesResponseTransformer,
      url: "/api/messages",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    });
  }

  public static getApiMessagesConversationByUserId<
    ThrowOnError extends boolean = false,
  >(options: Options<GetApiMessagesConversationByUserIdData, ThrowOnError>) {
    return (options.client ?? _heyApiClient).get<
      GetApiMessagesConversationByUserIdResponse,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: "Authorization",
          type: "apiKey",
        },
      ],
      responseTransformer:
        getApiMessagesConversationByUserIdResponseTransformer,
      url: "/api/messages/conversation/{userId}",
      ...options,
    });
  }

  public static getApiMessagesByMessageId<ThrowOnError extends boolean = false>(
    options: Options<GetApiMessagesByMessageIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<
      GetApiMessagesByMessageIdResponse,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: "Authorization",
          type: "apiKey",
        },
      ],
      responseTransformer: getApiMessagesByMessageIdResponseTransformer,
      url: "/api/messages/{messageId}",
      ...options,
    });
  }

  public static postApiMessagesByMessageIdRead<
    ThrowOnError extends boolean = false,
  >(options: Options<PostApiMessagesByMessageIdReadData, ThrowOnError>) {
    return (options.client ?? _heyApiClient).post<
      unknown,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: "Authorization",
          type: "apiKey",
        },
      ],
      url: "/api/messages/{messageId}/read",
      ...options,
    });
  }
}

export class NotificationService {
  public static getApiNotifications<ThrowOnError extends boolean = false>(
    options?: Options<GetApiNotificationsData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).get<
      GetApiNotificationsResponse,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: "Authorization",
          type: "apiKey",
        },
      ],
      responseTransformer: getApiNotificationsResponseTransformer,
      url: "/api/notifications",
      ...options,
    });
  }

  public static getApiNotificationsUnread<ThrowOnError extends boolean = false>(
    options?: Options<GetApiNotificationsUnreadData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).get<
      GetApiNotificationsUnreadResponse,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: "Authorization",
          type: "apiKey",
        },
      ],
      responseTransformer: getApiNotificationsUnreadResponseTransformer,
      url: "/api/notifications/unread",
      ...options,
    });
  }

  public static postApiNotificationsByNotificationIdRead<
    ThrowOnError extends boolean = false,
  >(
    options: Options<
      PostApiNotificationsByNotificationIdReadData,
      ThrowOnError
    >,
  ) {
    return (options.client ?? _heyApiClient).post<
      unknown,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: "Authorization",
          type: "apiKey",
        },
      ],
      url: "/api/notifications/{notificationId}/read",
      ...options,
    });
  }

  public static postApiNotificationsReadAll<
    ThrowOnError extends boolean = false,
  >(options?: Options<PostApiNotificationsReadAllData, ThrowOnError>) {
    return (options?.client ?? _heyApiClient).post<
      unknown,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: "Authorization",
          type: "apiKey",
        },
      ],
      url: "/api/notifications/read-all",
      ...options,
    });
  }
}

export class TaskItemService {
  public static getApiTasks<ThrowOnError extends boolean = false>(
    options?: Options<GetApiTasksData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).get<
      GetApiTasksResponse,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: "Authorization",
          type: "apiKey",
        },
      ],
      responseTransformer: getApiTasksResponseTransformer,
      url: "/api/tasks",
      ...options,
    });
  }

  public static postApiTasks<ThrowOnError extends boolean = false>(
    options?: Options<PostApiTasksData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).post<
      PostApiTasksResponse,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: "Authorization",
          type: "apiKey",
        },
      ],
      responseTransformer: postApiTasksResponseTransformer,
      url: "/api/tasks",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    });
  }

  public static deleteApiTasksByTaskId<ThrowOnError extends boolean = false>(
    options: Options<DeleteApiTasksByTaskIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).delete<
      unknown,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: "Authorization",
          type: "apiKey",
        },
      ],
      url: "/api/tasks/{taskId}",
      ...options,
    });
  }

  public static getApiTasksByTaskId<ThrowOnError extends boolean = false>(
    options: Options<GetApiTasksByTaskIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<
      GetApiTasksByTaskIdResponse,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: "Authorization",
          type: "apiKey",
        },
      ],
      responseTransformer: getApiTasksByTaskIdResponseTransformer,
      url: "/api/tasks/{taskId}",
      ...options,
    });
  }

  public static putApiTasksByTaskId<ThrowOnError extends boolean = false>(
    options: Options<PutApiTasksByTaskIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).put<
      unknown,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: "Authorization",
          type: "apiKey",
        },
      ],
      url: "/api/tasks/{taskId}",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    });
  }

  public static getApiTasksListByListId<ThrowOnError extends boolean = false>(
    options: Options<GetApiTasksListByListIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<
      GetApiTasksListByListIdResponse,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: "Authorization",
          type: "apiKey",
        },
      ],
      responseTransformer: getApiTasksListByListIdResponseTransformer,
      url: "/api/tasks/list/{listId}",
      ...options,
    });
  }

  public static postApiTasksMove<ThrowOnError extends boolean = false>(
    options?: Options<PostApiTasksMoveData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).post<
      unknown,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: "Authorization",
          type: "apiKey",
        },
      ],
      url: "/api/tasks/move",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    });
  }

  public static postApiTasksReorder<ThrowOnError extends boolean = false>(
    options?: Options<PostApiTasksReorderData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).post<
      unknown,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: "Authorization",
          type: "apiKey",
        },
      ],
      url: "/api/tasks/reorder",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    });
  }
}

export class TaskItemEditingService {
  public static putApiTasksEditingByTaskItemId<
    ThrowOnError extends boolean = false,
  >(options: Options<PutApiTasksEditingByTaskItemIdData, ThrowOnError>) {
    return (options.client ?? _heyApiClient).put<
      unknown,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: "Authorization",
          type: "apiKey",
        },
      ],
      url: "/api/tasks/editing/{taskItemId}",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    });
  }
}

export class TaskItemSpecialisedService {
  public static getApiTasksQueryingByTitlePattern<
    ThrowOnError extends boolean = false,
  >(options: Options<GetApiTasksQueryingByTitlePatternData, ThrowOnError>) {
    return (options.client ?? _heyApiClient).get<
      GetApiTasksQueryingByTitlePatternResponse,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: "Authorization",
          type: "apiKey",
        },
      ],
      responseTransformer: getApiTasksQueryingByTitlePatternResponseTransformer,
      url: "/api/tasks/querying/{titlePattern}",
      ...options,
    });
  }

  public static postApiTasksQuerying<ThrowOnError extends boolean = false>(
    options?: Options<PostApiTasksQueryingData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).post<
      PostApiTasksQueryingResponse,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: "Authorization",
          type: "apiKey",
        },
      ],
      responseTransformer: postApiTasksQueryingResponseTransformer,
      url: "/api/tasks/querying",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    });
  }
}

export class UserService {
  public static getApiUsersProfile<ThrowOnError extends boolean = false>(
    options?: Options<GetApiUsersProfileData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).get<
      GetApiUsersProfileResponse,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: "Authorization",
          type: "apiKey",
        },
      ],
      responseTransformer: getApiUsersProfileResponseTransformer,
      url: "/api/users/profile",
      ...options,
    });
  }

  public static putApiUsersProfile<ThrowOnError extends boolean = false>(
    options?: Options<PutApiUsersProfileData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).put<
      unknown,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: "Authorization",
          type: "apiKey",
        },
      ],
      url: "/api/users/profile",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    });
  }

  public static putApiUsersPassword<ThrowOnError extends boolean = false>(
    options?: Options<PutApiUsersPasswordData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).put<
      unknown,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: "Authorization",
          type: "apiKey",
        },
      ],
      url: "/api/users/password",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    });
  }

  public static getApiUsersSearch<ThrowOnError extends boolean = false>(
    options?: Options<GetApiUsersSearchData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).get<
      GetApiUsersSearchResponse,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: "Authorization",
          type: "apiKey",
        },
      ],
      responseTransformer: getApiUsersSearchResponseTransformer,
      url: "/api/users/search",
      ...options,
    });
  }
}

export class UserProfileService {
  public static getApiUserProfile<ThrowOnError extends boolean = false>(
    options?: Options<GetApiUserProfileData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).get<
      GetApiUserProfileResponse,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: "Authorization",
          type: "apiKey",
        },
      ],
      responseTransformer: getApiUserProfileResponseTransformer,
      url: "/api/UserProfile",
      ...options,
    });
  }

  public static putApiUserProfile<ThrowOnError extends boolean = false>(
    options?: Options<PutApiUserProfileData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).put<
      PutApiUserProfileResponse,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: "Authorization",
          type: "apiKey",
        },
      ],
      responseTransformer: putApiUserProfileResponseTransformer,
      url: "/api/UserProfile",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    });
  }

  public static deleteApiUserProfileProfilePhoto<
    ThrowOnError extends boolean = false,
  >(options?: Options<DeleteApiUserProfileProfilePhotoData, ThrowOnError>) {
    return (options?.client ?? _heyApiClient).delete<
      unknown,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: "Authorization",
          type: "apiKey",
        },
      ],
      url: "/api/UserProfile/profile-photo",
      ...options,
    });
  }

  public static getApiUserProfileProfilePhoto<
    ThrowOnError extends boolean = false,
  >(options?: Options<GetApiUserProfileProfilePhotoData, ThrowOnError>) {
    return (options?.client ?? _heyApiClient).get<
      unknown,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          name: "Authorization",
          type: "apiKey",
        },
      ],
      url: "/api/UserProfile/profile-photo",
      ...options,
    });
  }

  public static postApiUserProfileProfilePhoto<
    ThrowOnError extends boolean = false,
  >(options?: Options<PostApiUserProfileProfilePhotoData, ThrowOnError>) {
    return (options?.client ?? _heyApiClient).post<
      unknown,
      unknown,
      ThrowOnError
    >({
      ...formDataBodySerializer,
      security: [
        {
          name: "Authorization",
          type: "apiKey",
        },
      ],
      url: "/api/UserProfile/profile-photo",
      ...options,
      headers: {
        "Content-Type": null,
        ...options?.headers,
      },
    });
  }
}
