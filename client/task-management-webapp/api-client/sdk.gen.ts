// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-axios';
import type { LoginData, LoginResponse, RegisterData, RegisterResponse, GetUsersData, GetUsersResponse, GetTaskItemData, GetTaskItemResponse, PostTaskItemData } from './types.gen';
import { client as _heyApiClient } from './client.gen';
import { getTaskItemResponseTransformer } from './transformers.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const login = <ThrowOnError extends boolean = false>(options?: Options<LoginData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<LoginResponse, unknown, ThrowOnError>({
        responseType: 'text',
        url: '/api/Account/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const register = <ThrowOnError extends boolean = false>(options?: Options<RegisterData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<RegisterResponse, unknown, ThrowOnError>({
        responseType: 'text',
        url: '/api/Account/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getUsers = <ThrowOnError extends boolean = false>(options?: Options<GetUsersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUsersResponse, unknown, ThrowOnError>({
        responseType: 'text',
        url: '/api/SampleRepository',
        ...options
    });
};

export const getTaskItem = <ThrowOnError extends boolean = false>(options?: Options<GetTaskItemData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTaskItemResponse, unknown, ThrowOnError>({
        responseType: 'text',
        responseTransformer: getTaskItemResponseTransformer,
        url: '/api/TaskItem',
        ...options
    });
};

export const postTaskItem = <ThrowOnError extends boolean = false>(options?: Options<PostTaskItemData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        url: '/api/TaskItem',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};